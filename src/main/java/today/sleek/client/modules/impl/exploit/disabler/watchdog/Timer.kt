package today.sleek.client.modules.impl.exploit.disabler.watchdog

import e
import net.minecraft.network.Packet
import net.minecraft.network.play.INetHandlerPlayServer
import net.minecraft.network.play.client.C00PacketKeepAlive
import net.minecraft.network.play.client.C03PacketPlayer
import net.minecraft.network.play.client.C0FPacketConfirmTransaction
import today.sleek.base.event.PacketDirection
import today.sleek.base.event.impl.PacketEvent
import today.sleek.base.event.impl.UpdateEvent
import today.sleek.client.modules.impl.exploit.disabler.DisablerMode
import today.sleek.client.utils.chat.ChatUtil
import today.sleek.client.utils.math.Stopwatch
import today.sleek.client.utils.network.PacketUtil


/**
 * @author Kansio
 */
class Timer : DisablerMode("Watchdog Timer") {

    private var toCancel: Long = 0

    private val delay1: Stopwatch = Stopwatch()
    private val delay2: Stopwatch = Stopwatch()

    val packets = ArrayList<Packetz>()

    class Packetz(val packet: Packet<*>, val ms: Long, val delay: Long)

    override fun onEnable() {

    }

    override fun onUpdate(event: UpdateEvent) {
        if (packets.isNotEmpty() && packets.size > 2) {
            for(p in packets){
                var delay = p.delay
                if(System.currentTimeMillis() >= p.ms + delay) {
                    PacketUtil.sendPacketNoEvent(p.packet as Packet<INetHandlerPlayServer>?)
                    packets.remove(p)
                }
            }
        }
    }

    override fun onPacket(event: PacketEvent) {
        var packet = event.getPacket<Packet<*>>()
        //crucial
        if(mc.netHandler == null)
            return
        if(packet is C0FPacketConfirmTransaction || packet is C00PacketKeepAlive){
            event.isCancelled = true
            packets.add(Packetz(packet,System.currentTimeMillis(),48))
        }
    }
}
