package today.sleek.client.modules.impl.exploit

import today.sleek.base.modules.ModuleData
import today.sleek.base.modules.ModuleCategory
import net.minecraft.network.play.client.C14PacketTabComplete
import com.google.common.eventbus.Subscribe
import net.minecraft.network.Packet
import today.sleek.base.event.impl.PacketEvent
import net.minecraft.network.play.server.S3APacketTabComplete
import today.sleek.base.value.value.BooleanValue
import today.sleek.client.modules.impl.Module
import today.sleek.client.utils.chat.ChatUtil
import today.sleek.client.utils.math.Stopwatch
import java.util.*

@ModuleData(
    name = "Plugins",
    category = ModuleCategory.EXPLOIT,
    description = "Attempts to show you the plugins on the server"
)
class Plugins : Module() {

    private val timer = Stopwatch()
    private val slashAbout = BooleanValue("/About", this, false)
    var differentMethod = false

    override fun onEnable() {
        timer.resetTime()
        val differentMethod = false
        mc.netHandler.networkManager.sendPacket(C14PacketTabComplete("/"))
        ChatUtil.log("Listening for a S3APacketTabComplete for 20s!")
    }

    @Subscribe
    fun onPacket(event: PacketEvent) {
        if (event.getPacket<Packet<*>>() is S3APacketTabComplete) {
            val packet = event.getPacket<S3APacketTabComplete>()
            val commands = packet.func_149630_c()
            println(Arrays.toString(commands))
            var message = ""
            var size = 0
            if (!differentMethod) {
                for (command in commands) {
                    val pluginName = command.split(":").toTypedArray()[0].substring(1)
                    if (!message.contains(pluginName) && command.contains(":") && !pluginName.equals(
                            "minecraft",
                            ignoreCase = true
                        ) && !pluginName.equals("bukkit", ignoreCase = true)
                    ) {
                        size++
                        message += if (message.isEmpty()) {
                            pluginName
                        } else {
                            "\u00a78, \u00a7a$pluginName"
                        }
                    }
                }
            } else {
                for (command in commands) {
                    message += if (message.isEmpty()) {
                        command
                    } else {
                        "\u00a78, \u00a7a$command"
                    }
                }
            }
            if (!message.isEmpty()) {
                ChatUtil.log("\u00a77Plugins (\u00a7f$size\u00a77): \u00a7a $message\u00a77.")
            } else {
                ChatUtil.log("Plugins: none.")
            }
            toggle()
            event.isCancelled = true
        }
        if (timer.timeElapsed(20000)) {
            toggle()
            if (slashAbout.value) {
                ChatUtil.log("Stopped listening for an S3APacketTabComplete! Took to long (20s)! trying different method")
                mc.netHandler.networkManager.sendPacket(C14PacketTabComplete("/about "))
                timer.resetTime()
                val differentMethod = true
            } else {
                ChatUtil.log("Stopped listening for an S3APacketTabComplete! Took to long (20s)!")
            }
        }
    }
}