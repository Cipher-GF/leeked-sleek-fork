package today.sleek.client.modules.impl.exploit

import today.sleek.base.modules.ModuleData
import today.sleek.base.modules.ModuleCategory
import today.sleek.base.value.value.ModeValue
import com.google.common.eventbus.Subscribe
import today.sleek.base.event.impl.UpdateEvent
import net.minecraft.item.ItemFood
import net.minecraft.item.ItemPotion
import net.minecraft.network.play.client.C03PacketPlayer.C06PacketPlayerPosLook
import net.minecraft.network.play.client.C03PacketPlayer
import net.minecraft.network.play.client.C08PacketPlayerBlockPlacement
import net.minecraft.network.play.client.C03PacketPlayer.C04PacketPlayerPosition
import today.sleek.client.modules.impl.Module
import today.sleek.client.utils.network.PacketUtil

@ModuleData(name = "Fast Use", category = ModuleCategory.EXPLOIT, description = "Consumes items faster")
class FastUse : Module() {

    private val modeValue = ModeValue("Mode", this, "Verus", "Matrix", "Vanilla")

    @Subscribe
    fun onUpdate(event: UpdateEvent) {
        if (mc.thePlayer.isUsingItem && mc.thePlayer.isCollidedVertically && mc.thePlayer.heldItem.item is ItemFood || mc.thePlayer.isUsingItem && mc.thePlayer.heldItem.item is ItemPotion) {
            when (modeValue.valueAsString) {
                "Verus" -> {
                    if (mc.thePlayer.isUsingItem) {
                        if (mc.thePlayer.onGround) {
                            if (mc.thePlayer.ticksExisted % 4 == 0) {
                                var i = 0
                                while (i < 8) {
                                    val x = mc.thePlayer.posX
                                    val y = mc.thePlayer.posY + 1.0E-9
                                    val z = mc.thePlayer.posZ
                                    mc.thePlayer.sendQueue.addToSendQueue(
                                        C06PacketPlayerPosLook(
                                            x,
                                            y,
                                            z,
                                            mc.thePlayer.rotationYaw,
                                            mc.thePlayer.rotationPitch,
                                            true
                                        )
                                    )
                                    i++
                                }
                            }
                        }
                    }
                }
                "Vanilla" -> {
                    var i = 0
                    while (i < 20) {
                        PacketUtil.sendPacketNoEvent(C03PacketPlayer(mc.thePlayer.onGround))
                        i++
                    }
                }
                "Matrix" -> {
                    var i = 0
                    while (i < 20) {
                        PacketUtil.sendPacketNoEvent(
                            C08PacketPlayerBlockPlacement(
                                mc.thePlayer.position.down(256),
                                256,
                                null,
                                0f,
                                0f,
                                0f
                            )
                        )
                        PacketUtil.sendPacket(
                            C04PacketPlayerPosition(
                                mc.thePlayer.posX,
                                mc.thePlayer.posY,
                                mc.thePlayer.posZ,
                                true
                            )
                        )
                        i++
                    }
                }
            }
        }
    }
}