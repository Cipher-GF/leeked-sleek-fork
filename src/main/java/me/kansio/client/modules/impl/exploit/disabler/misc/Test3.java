package me.kansio.client.modules.impl.exploit.disabler.misc;

import me.kansio.client.Client;
import me.kansio.client.event.PacketDirection;
import me.kansio.client.event.impl.PacketEvent;
import me.kansio.client.event.impl.UpdateEvent;
import me.kansio.client.modules.impl.combat.KillAura;
import me.kansio.client.modules.impl.exploit.disabler.DisablerMode;
import me.kansio.client.notification.Notification;
import me.kansio.client.notification.NotificationManager;
import me.kansio.client.utils.chat.ChatUtil;
import me.kansio.client.utils.math.Stopwatch;
import me.kansio.client.utils.player.PlayerUtil;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.server.S07PacketRespawn;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;

import java.util.ArrayDeque;
import java.util.Deque;

public class Test3 extends DisablerMode {
    private final Deque<TimestampedPacket> transactionQueue = new ArrayDeque<>();
    private final Stopwatch stopwatch = new Stopwatch();
    private final Stopwatch packetStopwatch = new Stopwatch();
    private final Stopwatch spikeStopwatch = new Stopwatch();
    private float yaw, pitch;
    private long lastTransaction;
    private int lagbacks;
    private int ticks;
    private boolean spike;
    public Test3() {
        super("test 3");
    }
    private class TimestampedPacket {
        private final Packet<?> packet;
        private long timestamp;

        public TimestampedPacket(final Packet<?> packet, final long timestamp) {
            this.packet = packet;
            this.timestamp = timestamp;
        }
    }

    @Override
    public void onUpdate(UpdateEvent event) {
        if (!event.isPre())
            return;
        if (mc.theWorld == null)
            transactionQueue.clear();
        if (lastTransaction > 0)
            return;
        if (packetStopwatch.timeElapsed(mc.thePlayer.ticksExisted < 120 ? 2000 : 200)) {
            while (!transactionQueue.isEmpty())
                mc.getNetHandler().addToSendQueueNoEvent(transactionQueue.removeLast().packet);
            packetStopwatch.resetTime();
            spike = false;
        }
        if (mc.thePlayer.ticksExisted == 120) {
            NotificationManager.getNotificationManager().show(new Notification(Notification.NotificationType.INFO, "Bypass", "Watchdog checks now disabled!", 1));
            event.setPosX(event.getPosX() + 1);
            event.setPosZ(event.getPosZ() + 1);
        }
        if (spikeStopwatch.timeElapsed(10000) && !Client.getInstance().getModuleManager().getModuleByName("Long jump").isToggled() && (!Client.getInstance().getModuleManager().getModuleByName("Killaura").isToggled() || KillAura.target == null) && !Client.getInstance().getModuleManager().getModuleByName("Scaffold").isToggled() && !Client.getInstance().getModuleManager().getModuleByName("Flight").isToggled()) {
            spike = true;
            packetStopwatch.resetTime();
            ChatUtil.log("spiked");
            spikeStopwatch.resetTime();
        }
    }

    @Override
    public void onPacket(PacketEvent event) {
        if (mc.thePlayer == null || mc.thePlayer.ticksExisted < 5) return;
        if (event.getPacketDirection().equals(PacketDirection.INBOUND)) {
            if (event.getPacket() instanceof C03PacketPlayer) {
                if (lastTransaction > 0) {
                    ChatUtil.log("DISABLING");
                    event.setCancelled(true);
                    lastTransaction--;
                    return;
                }
                final C03PacketPlayer packetPlayer = (C03PacketPlayer) event.getPacket();
                if (!packetPlayer.isMoving() && packetPlayer.getRotating())
                    event.setCancelled(true);
            }
            if (mc.thePlayer.ticksExisted < 120 || spike) {

                if (event.getPacket() instanceof C03PacketPlayer) {
                    final C03PacketPlayer packetPlayer = (C03PacketPlayer) event.getPacket();
                    if (!packetPlayer.isMoving() && !packetPlayer.getRotating())
                        event.setCancelled(true);
                    else
                        transactionQueue.push(new TimestampedPacket(event.getPacket(), System.currentTimeMillis()));
                    event.setCancelled(true);
                }
                if (event.getPacket() instanceof C00PacketKeepAlive) {
                    transactionQueue.push(new TimestampedPacket(event.getPacket(), System.currentTimeMillis()));
                    event.setCancelled(true);
                }

                if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
                    C0FPacketConfirmTransaction confirmTransaction = (C0FPacketConfirmTransaction) event.getPacket();
                    transactionQueue.push(new TimestampedPacket(event.getPacket(), System.currentTimeMillis()));
                    event.setCancelled(true);
                }
            }
        } else {
            if (event.getPacket() instanceof S07PacketRespawn) {
                lagbacks = 0;
                transactionQueue.clear();
                spike = false;
                spikeStopwatch.resetTime();
            }

            if (event.getPacket() instanceof S08PacketPlayerPosLook && !Client.getInstance().getModuleManager().getModuleByName("Flight").isToggled()) {
                if (mc.thePlayer.ticksExisted < 5 || !PlayerUtil.isBlockUnder())
                    return;
                S08PacketPlayerPosLook packetPlayerPosLook = (S08PacketPlayerPosLook) event.getPacket();
                if (stopwatch.timeElapsed(2000)) {
                    if (mc.thePlayer.getDistance(packetPlayerPosLook.getX(), packetPlayerPosLook.getY(), packetPlayerPosLook.getZ()) < 10) {
                        lagbacks++;
                        lastTransaction = 6;
                        event.setCancelled(true);
                    }
                    stopwatch.resetTime();
                }
            }
        }
    }
}
