package me.kansio.client.modules.impl.exploit;

import dorkbox.messageBus.annotations.Subscribe;
import me.kansio.client.event.PacketDirection;
import me.kansio.client.event.impl.PacketEvent;
import me.kansio.client.event.impl.UpdateEvent;
import me.kansio.client.manager.Manager;
import me.kansio.client.modules.api.ModuleCategory;
import me.kansio.client.modules.impl.Module;
import me.kansio.client.property.value.ModeValue;
import me.kansio.client.utils.Stopwatch;
import me.kansio.client.utils.chat.ChatUtil;
import me.kansio.client.utils.network.PacketUtil;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Timer;
import java.util.concurrent.ConcurrentLinkedDeque;

public class Disabler extends Module {

    private ModeValue modeValue = new ModeValue("Mode", this, "Keep-Alive", "Vehicle", "Verus Combat", "Verus Old");
    private LinkedList<Packet> packetQueue = new LinkedList<>();

    private final Stopwatch stopwatch = new Stopwatch();

    private final Queue<Packet<?>> retardQueue = new ConcurrentLinkedDeque<>();
    private final Stopwatch timer = new Stopwatch();
    private boolean expectedTeleport;
    private LinkedList<Packet> transactions = new LinkedList<>();

    public Disabler() {
        super("Disabler", ModuleCategory.EXPLOIT);
        register(modeValue);
    }

    @Override
    public void onEnable() {
        this.packetQueue.clear();
        this.expectedTeleport = false;
        retardQueue.clear();
        transactions.clear();
        this.timer.resetTime();
    }

    @Subscribe
    public void onSendPacket(PacketEvent event) {
        Packet packet = event.getPacket();

        if (event.getPacketDirection() != PacketDirection.OUTBOUND)  return;

        switch (modeValue.getValueAsString()) {
            case "Keep-Alive": {
                if (event.getPacket() instanceof C00PacketKeepAlive) {
                    event.setCancelled(true);
                }
                break;
            }
            case "Vehicle": {
                if (event.getPacket() instanceof C03PacketPlayer) {
                    PacketUtil.sendPacketNoEvent(new C0CPacketInput());
                }
                break;
            }

            case "Verus Old": {
                if (!this.shouldRun()) return;

                if (event.getPacket() instanceof C0FPacketConfirmTransaction
                        || event.getPacket() instanceof C00PacketKeepAlive) {

                    short action = -1;

                    if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
                        action = ((C0FPacketConfirmTransaction) event.getPacket()).getUid();
                    }

                    if (action != -1 && this.isInventory(action)) return;

                    event.setCancelled(true);
                    this.packetQueue.add(event.getPacket());
                }

                if (event.getPacket() instanceof C03PacketPlayer) {
                    C03PacketPlayer c03PacketPlayer = (C03PacketPlayer) event.getPacket();


                    if (mc.thePlayer.ticksExisted % 25 == 0) {
                        this.expectedTeleport = true;

                        c03PacketPlayer.setMoving(false);
                        c03PacketPlayer.y = -0.015625;
                        c03PacketPlayer.onGround = false;
                    }
                }

                if (event.getPacket() instanceof S08PacketPlayerPosLook && this.expectedTeleport) {
                    S08PacketPlayerPosLook s08PacketPlayerPosLook = (S08PacketPlayerPosLook) event.getPacket();
                    this.expectedTeleport = false;

                    event.setCancelled(true);

                    PacketUtil.sendPacketNoEvent(new C03PacketPlayer
                            .C06PacketPlayerPosLook(s08PacketPlayerPosLook.getX(),
                            s08PacketPlayerPosLook.getY(),
                            s08PacketPlayerPosLook.getZ(),
                            s08PacketPlayerPosLook.getYaw(),
                            s08PacketPlayerPosLook.getPitch(), true));
                }
                break;
            }

            case "Verus Combat": {
                if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
                    C0FPacketConfirmTransaction packetConfirmTransaction = event.getPacket();
                    transactions.add(packetConfirmTransaction);
                    event.setCancelled(true);
                } else if (event.getPacket() instanceof C0BPacketEntityAction) {
                    event.setCancelled(true);
                }
                break;
            }
        }
    }


    @Subscribe
    public void onUpdate(UpdateEvent event) {
        switch (modeValue.getValueAsString()) {
            case "Verus Combat": {
                // any ver verus combat disabler LOL
                // thanks dort ily <3
                if (mc.thePlayer.ticksExisted % 180 == 0) {
                    ChatUtil.log(transactions.size() + "");

                    if (transactions.size() > 20) {
                        for (int i = 0; i < transactions.size(); i++) {
                            PacketUtil.sendPacketNoEvent(transactions.poll());
                        }
                    }
                }
                break;
            }
            case "Verus Old": {

                if (!this.shouldRun()) {
                    this.expectedTeleport = false;
                    this.timer.resetTime();
                    this.packetQueue.clear();
                    return;
                }

                if (this.timer.timeElapsed(260L)) {
                    this.timer.resetTime();

                    if (!this.packetQueue.isEmpty()) {
                        PacketUtil.sendPacketNoEvent(this.packetQueue.poll());
                    }
                }
                break;
            }
        }
    }

    boolean shouldRun() {
        return mc.thePlayer != null && mc.thePlayer.ticksExisted > 5;
    }

    boolean isInventory(short action) {
        return action > 0 && action < 100;
    }

    @Override
    public String getSuffix() {
        return " " + modeValue.getValueAsString();
    }
}
