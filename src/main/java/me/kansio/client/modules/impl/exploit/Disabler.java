package me.kansio.client.modules.impl.exploit;

import dorkbox.messageBus.annotations.Subscribe;
import me.kansio.client.event.PacketDirection;
import me.kansio.client.event.impl.PacketEvent;
import me.kansio.client.event.impl.UpdateEvent;
import me.kansio.client.modules.api.ModuleCategory;
import me.kansio.client.modules.impl.Module;
import me.kansio.client.property.value.BooleanValue;
import me.kansio.client.property.value.ModeValue;
import me.kansio.client.property.value.NumberValue;
import me.kansio.client.utils.math.Stopwatch;
import me.kansio.client.utils.chat.ChatUtil;
import me.kansio.client.utils.network.PacketSleepThread;
import me.kansio.client.utils.network.PacketUtil;
import net.minecraft.network.Packet;
import net.minecraft.network.PacketThreadUtil;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;

import java.util.LinkedList;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedDeque;

public class Disabler extends Module {

    private ModeValue modeValue;
    private LinkedList<Packet> packetQueue = new LinkedList<>();

    private final Stopwatch stopwatch = new Stopwatch();

    //Custom Shit
    private final BooleanValue cancelTransactions = new BooleanValue("Cancel Transactions", this, false, modeValue, "Custom");
    private final BooleanValue cancelKeepAlives = new BooleanValue("Cancel Keep Alive", this, false, modeValue, "Custom");
    private final BooleanValue delayTransactions = new BooleanValue("Delay Transactions", this, false, modeValue, "Custom");
    private final NumberValue delayTransAmount = new NumberValue("Transaction Delay", this, 1000, 0, 60000, 0.1, delayTransactions);
    private final BooleanValue delayKeepAlives = new BooleanValue("Delay Keep Alive", this, false, modeValue, "Custom");
    private final NumberValue delayKeepAliveAmount = new NumberValue("Delay Alive Amount", this, 1000, 0, 60000, 0.1, delayKeepAlives);
    private final BooleanValue sendC0C = new BooleanValue("Send C0C", this, false, modeValue, "Custom");
    private final BooleanValue maxc0c = new BooleanValue("Max Value C0C", this, false, modeValue, "Custom");
    private final BooleanValue voidTeleport = new BooleanValue("Void Teleport", this, false, modeValue, "Custom");
    private final NumberValue voidTpDelay = new NumberValue("TP Delay", this, 3000, 0, 60000, 1, voidTeleport);
    private final NumberValue voidTpAmount = new NumberValue("TP Amount", this, -999999999, 0, 6000000, 0.1, voidTeleport);
    private final BooleanValue spoofOnGround = new BooleanValue("Spoof Ground", this, false, modeValue, "Custom");
    private final BooleanValue offGround = new BooleanValue("No ground", this, false, modeValue, "Custom");
    private final BooleanValue spectateSpoof = new BooleanValue("Spectate Spoof", this, false, modeValue, "Custom");
    private final BooleanValue abilitiesSpoof = new BooleanValue("Abilities Spoof", this, false, modeValue, "Custom");

    private final Queue<Packet<?>> retardQueue = new ConcurrentLinkedDeque<>();
    private final Stopwatch timer = new Stopwatch();
    private boolean expectedTeleport;
    private final LinkedList<Packet> transactions = new LinkedList<>();

    //for custom mode
    private LinkedList<Packet> customKeepAlives = new LinkedList<>();
    private LinkedList<Packet> customTransactions = new LinkedList<>();

    public Disabler() {
        super("Disabler", ModuleCategory.EXPLOIT);

        modeValue = new ModeValue("Mode", this, "Keep-Alive", "Vehicle", "Verus Combat", "Verus Old", "Custom", "Test", "CUM NIGGA BALLS DISABLER");
        register(
                modeValue,

                //custom values
                cancelTransactions, cancelKeepAlives, delayTransactions, delayKeepAlives, delayKeepAliveAmount, delayTransAmount, sendC0C, maxc0c,
                voidTeleport, voidTpDelay, voidTpAmount, spectateSpoof, abilitiesSpoof
        );
    }

    @Override
    public void onEnable() {
        this.packetQueue.clear();
        this.expectedTeleport = false;
        retardQueue.clear();
        transactions.clear();
        this.timer.resetTime();

        if (modeValue.getValue().equals("CUM NIGGA BALLS DISABLER")) {
            for (int i = 0; i < 19; i++) {
                PacketUtil.sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX,
                        mc.thePlayer.posY + 0.300001, mc.thePlayer.posZ, false));
                PacketUtil.sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX,
                        mc.thePlayer.posY, mc.thePlayer.posZ, false));
            }
            PacketUtil.sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true));
        }
    }

    @Subscribe
    public void onSendPacket(PacketEvent event) {
        Packet packet = event.getPacket();

        switch (modeValue.getValueAsString()) {
            case "Keep-Alive": {
                if (event.getPacket() instanceof C00PacketKeepAlive) {
                    event.setCancelled(true);
                }
                break;
            }
            case "Vehicle": {
                if (event.getPacket() instanceof C03PacketPlayer) {
                    PacketUtil.sendPacketNoEvent(new C0CPacketInput());
                }
                break;
            }

            case "Verus Old": {
                if (!this.shouldRun()) return;

                if (event.getPacket() instanceof C0FPacketConfirmTransaction
                        || event.getPacket() instanceof C00PacketKeepAlive) {

                    short action = -1;

                    if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
                        action = ((C0FPacketConfirmTransaction) event.getPacket()).getUid();
                    }

                    if (action != -1 && this.isLegitC0F(action)) return;

                    event.setCancelled(true);
                    this.packetQueue.add(event.getPacket());
                }

                if (event.getPacket() instanceof C03PacketPlayer) {
                    C03PacketPlayer c03PacketPlayer = event.getPacket();


                    if (mc.thePlayer.ticksExisted % 25 == 0) {
                        this.expectedTeleport = true;

                        c03PacketPlayer.y = -0.015625;
                        c03PacketPlayer.onGround = false;
                    }
                }

                if (event.getPacket() instanceof S08PacketPlayerPosLook && this.expectedTeleport) {
                    S08PacketPlayerPosLook s08PacketPlayerPosLook = event.getPacket();
                    this.expectedTeleport = false;

                    event.setCancelled(true);

                    PacketUtil.sendPacketNoEvent(new C03PacketPlayer
                            .C06PacketPlayerPosLook(s08PacketPlayerPosLook.getX(),
                            s08PacketPlayerPosLook.getY(),
                            s08PacketPlayerPosLook.getZ(),
                            s08PacketPlayerPosLook.getYaw(),
                            s08PacketPlayerPosLook.getPitch(), true));
                }
                break;
            }

            case "Test": {
                if (!this.shouldRun()) return;

                if (event.getPacket() instanceof C00PacketKeepAlive) {
                    retardQueue.add(event.getPacket());
                    event.setCancelled(true);
                }

                if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
                    if (isLegitC0F(((C0FPacketConfirmTransaction) event.getPacket()).getUid())) return;

                    this.retardQueue.add(event.getPacket());
                    event.setCancelled(true);
                }

                if (event.getPacket() instanceof C0BPacketEntityAction) {
                    event.setCancelled(true);
                }

                if (event.getPacket() instanceof C03PacketPlayer) {
                    C03PacketPlayer c03PacketPlayer = event.getPacket();

                    if (mc.thePlayer.ticksExisted % 5 == 0)
                        PacketUtil.sendPacketNoEvent(new C0CPacketInput());

                    if (mc.thePlayer.ticksExisted % 25 == 0) {
                        this.expectedTeleport = true;

                        c03PacketPlayer.y = 0.015625;
                        c03PacketPlayer.onGround = false;
                    }
                }

                if (event.getPacket() instanceof S08PacketPlayerPosLook && this.expectedTeleport) {
                    S08PacketPlayerPosLook p = event.getPacket();
                    this.expectedTeleport = false;

                    event.setCancelled(true);

                    PacketUtil.sendPacketNoEvent(new C03PacketPlayer
                            .C06PacketPlayerPosLook(p.getX(),
                            p.getY(),
                            p.getZ(),
                            p.getYaw(),
                            p.getPitch(), true));

                }
                break;
            }

            case "Verus Combat": {
                if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
                    C0FPacketConfirmTransaction packetConfirmTransaction = event.getPacket();
                    transactions.add(packetConfirmTransaction);
                    event.setCancelled(true);
                } else if (event.getPacket() instanceof C0BPacketEntityAction) {
                    event.setCancelled(true);
                }
                break;
            }

            case "Custom": {
                if (cancelKeepAlives.getValue() && event.getPacket() instanceof C00PacketKeepAlive) {
                    event.setCancelled(true);
                }
                if (cancelTransactions.getValue() && event.getPacket() instanceof C0FPacketConfirmTransaction) {
                    event.setCancelled(true);
                }
                if (sendC0C.getValue() && event.getPacket() instanceof C03PacketPlayer) {
                    if (!maxc0c.getValue()) {
                        PacketUtil.sendPacketNoEvent(new C0CPacketInput());
                    } else {
                        PacketUtil.sendPacketNoEvent(new C0CPacketInput(Float.MIN_VALUE, Float.MIN_VALUE, false, false));
                    }
                }
                if (spoofOnGround.getValue() && event.getPacket() instanceof C03PacketPlayer) {
                    C03PacketPlayer c03PacketPlayer = event.getPacket();
                    c03PacketPlayer.onGround = true;

                    PacketUtil.sendPacketNoEvent(c03PacketPlayer);
                    event.setCancelled(true);
                }

                if (offGround.getValue() && event.getPacket() instanceof C03PacketPlayer) {
                    C03PacketPlayer c03PacketPlayer = event.getPacket();
                    c03PacketPlayer.onGround = false;
                    c03PacketPlayer.y = 0.15;

                    PacketUtil.sendPacketNoEvent(c03PacketPlayer);
                    event.setCancelled(true);
                }

                if (delayKeepAlives.getValue() && event.getPacket() instanceof C00PacketKeepAlive) {
                    customKeepAlives.add(event.getPacket());
                    event.setCancelled(true);
                }

                if (delayTransactions.getValue() && event.getPacket() instanceof C0FPacketConfirmTransaction) {
                    customTransactions.add(event.getPacket());
                    event.setCancelled(true);
                }

                if (spectateSpoof.getValue() && event.getPacket() instanceof C03PacketPlayer) {
                    C03PacketPlayer c03PacketPlayer = event.getPacket();
                    c03PacketPlayer.onGround = false;

                    PacketUtil.sendPacketNoEvent(new C18PacketSpectate(mc.thePlayer.getUniqueID()));
                    PacketUtil.sendPacketNoEvent(new C13PacketPlayerAbilities(mc.thePlayer.capabilities));
                }

                if (abilitiesSpoof.getValue() && event.getPacket() instanceof C13PacketPlayerAbilities) {
                    C13PacketPlayerAbilities p = event.getPacket();

                    p.flying = true;
                    p.invulnerable = true;
                    p.allowFlying = true;
                    p.creativeMode = false;
                }

                break;
            }

            case "CUM NIGGA BALLS DISABLER": {
                if (event.getPacket() instanceof C00PacketKeepAlive) {
                    event.setCancelled(mc.thePlayer.ticksExisted % 200 != 0);
                }

                if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
                    event.setCancelled(mc.thePlayer.ticksExisted % 200 != 0);
                }

                if (event.getPacket() instanceof C0BPacketEntityAction) {
                    event.setCancelled(true);
                }

               /* if (event.getPacket() instanceof C03PacketPlayer) {
                    C03PacketPlayer c03 = event.getPacket();
                    c03.y += mc.thePlayer.ticksExisted % 200 != 0 ? 1 : 0.5;
                    if (mc.thePlayer.ticksExisted % 400 == 0) {
                        PacketUtil.sendPacketNoEvent(new C0CPacketInput());
                    }
                }*/


                break;
            }
        }
    }


    @Subscribe
    public void onUpdate(UpdateEvent event) {
        switch (modeValue.getValueAsString()) {
            case "Verus Combat": {
                // any ver verus combat disabler LOL
                // thanks dort ily <3
                if (mc.thePlayer.ticksExisted % 180 == 0) {
                    ChatUtil.log(transactions.size() + "");

                    if (transactions.size() > 20) {
                        for (int i = 0; i < transactions.size(); i++) {
                            PacketUtil.sendPacketNoEvent(transactions.poll());
                        }
                    }
                }
                break;
            }

            case "Verus Old": {

                if (!this.shouldRun()) {
                    this.expectedTeleport = false;
                    this.timer.resetTime();
                    this.packetQueue.clear();
                    return;
                }

                if (this.timer.timeElapsed(260L)) {
                    this.timer.resetTime();

                    if (!this.packetQueue.isEmpty()) {
                        PacketUtil.sendPacketNoEvent(this.packetQueue.poll());
                    }
                }
                break;
            }

            case "Test": {
                if (!this.shouldRun()) {
                    this.expectedTeleport = false;
                    this.timer.resetTime();
                    this.retardQueue.clear();
                    return;
                }

                if (!this.retardQueue.isEmpty()) {
                    if (retardQueue.size() > 400) {
                        for (int i = 0; i < 10000; i++) {
                            if (retardQueue.size() < 300) {
                                return;
                            }

                            PacketUtil.sendPacketNoEvent(this.retardQueue.poll());
                        }
                    }
                }

                if (this.timer.timeElapsed(80L)) {
                    this.timer.resetTime();

                    for (int i = 0; i < 3; i++) {
                        PacketUtil.sendPacketNoEvent(this.retardQueue.poll());
                    }

                }
                break;
            }

            case "Custom": {
                if (voidTeleport.getValue()) {
                    if (stopwatch.timeElapsed(voidTpDelay.getValue().longValue())) {
                        C03PacketPlayer packet = new C03PacketPlayer();
                        packet.y = voidTpAmount.getValue().floatValue();
                        PacketUtil.sendPacketNoEvent(packet);
                    }
                }

                if (delayTransactions.getValue()) {
                    if (stopwatch.timeElapsed(delayTransAmount.getValue().longValue())) {
                        if (!customTransactions.isEmpty())
                            PacketUtil.sendPacketNoEvent(customTransactions.poll());
                    }
                }

                if (delayKeepAlives.getValue()) {
                    if (stopwatch.timeElapsed(delayKeepAliveAmount.getValue().longValue())) {
                        if (!customKeepAlives.isEmpty())
                            PacketUtil.sendPacketNoEvent(customKeepAlives.poll());
                    }
                }
                break;
            }
        }
    }

    boolean shouldRun() {
        return mc.thePlayer != null && mc.thePlayer.ticksExisted > 5;
    }

    boolean isLegitC0F(short action) {
        return action > 0 && action < 100;
    }

    @Override
    public String getSuffix() {
        return " " + modeValue.getValueAsString();
    }
}
