package me.kansio.client.modules.impl.exploit;

import dorkbox.messageBus.annotations.Subscribe;
import lombok.Getter;
import me.kansio.client.event.PacketDirection;
import me.kansio.client.event.impl.PacketEvent;
import me.kansio.client.event.impl.UpdateEvent;
import me.kansio.client.modules.api.ModuleCategory;
import me.kansio.client.modules.impl.Module;
import me.kansio.client.modules.impl.exploit.disabler.DisablerMode;
import me.kansio.client.property.value.BooleanValue;
import me.kansio.client.property.value.ModeValue;
import me.kansio.client.property.value.NumberValue;
import me.kansio.client.utils.java.ReflectUtils;
import me.kansio.client.utils.math.Stopwatch;
import me.kansio.client.utils.chat.ChatUtil;
import me.kansio.client.utils.network.PacketSleepThread;
import me.kansio.client.utils.network.PacketUtil;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;

import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedDeque;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

@Getter
public class Disabler extends Module {

    private final List<? extends DisablerMode> modes = ReflectUtils.getRelects(this.getClass().getPackage().getName() + ".disabler", DisablerMode.class).stream()
            .map(aClass -> {
                try {
                    return aClass.getDeclaredConstructor().newInstance();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                return null;
            })
            .sorted(Comparator.comparing(speedMode -> speedMode != null ? speedMode.getName() : null))
            .collect(Collectors.toList());
    private final ModeValue modeValue = new ModeValue("Mode", this, modes.stream().map(DisablerMode::getName).collect(Collectors.toList()).toArray(new String[]{}));
    private DisablerMode currentMode = modes.stream().anyMatch(speedMode -> speedMode.getName().equalsIgnoreCase(modeValue.getValue())) ? modes.stream().filter(speedMode -> speedMode.getName().equalsIgnoreCase(modeValue.getValue())).findAny().get() : null;


    private final Stopwatch stopwatch = new Stopwatch();

    //Custom Shit
    private final BooleanValue cancelTransactions = new BooleanValue("Cancel Transactions", this, false, modeValue, "Custom");
    private final BooleanValue cancelKeepAlives = new BooleanValue("Cancel Keep Alive", this, false, modeValue, "Custom");
    private final BooleanValue delayTransactions = new BooleanValue("Delay Transactions", this, false, modeValue, "Custom");
    private final NumberValue delayTransAmount = new NumberValue("Transaction Delay", this, 1000, 0, 60000, 0.1, delayTransactions);
    private final BooleanValue delayKeepAlives = new BooleanValue("Delay Keep Alive", this, false, modeValue, "Custom");
    private final NumberValue delayKeepAliveAmount = new NumberValue("Delay Alive Amount", this, 1000, 0, 60000, 0.1, delayKeepAlives);
    private final BooleanValue sendC0C = new BooleanValue("Send C0C", this, false, modeValue, "Custom");
    private final BooleanValue maxc0c = new BooleanValue("Max Value C0C", this, false, modeValue, "Custom");
    private final BooleanValue voidTeleport = new BooleanValue("Void Teleport", this, false, modeValue, "Custom");
    private final NumberValue voidTpDelay = new NumberValue("TP Delay", this, 3000, 0, 60000, 1, voidTeleport);
    private final NumberValue voidTpAmount = new NumberValue("TP Amount", this, -999999999, 0, 6000000, 0.1, voidTeleport);
    private final BooleanValue spoofOnGround = new BooleanValue("Spoof Ground", this, false, modeValue, "Custom");
    private final BooleanValue offGround = new BooleanValue("No ground", this, false, modeValue, "Custom");
    private final BooleanValue spectateSpoof = new BooleanValue("Spectate Spoof", this, false, modeValue, "Custom");
    private final BooleanValue abilitiesSpoof = new BooleanValue("Abilities Spoof", this, false, modeValue, "Custom");


    private boolean expectedTeleport;


    //for custom mode

    public Disabler() {
        super("Disabler", ModuleCategory.EXPLOIT);
        register(
                modeValue,

                //custom values
                cancelTransactions, cancelKeepAlives, delayTransactions, delayKeepAlives, delayKeepAliveAmount, delayTransAmount, sendC0C, maxc0c,
                voidTeleport, voidTpDelay, voidTpAmount, spectateSpoof, abilitiesSpoof
        );
    }

    @Override
    public void onEnable() {

        this.currentMode = modes.stream().anyMatch(disablerMode -> disablerMode.getName().equalsIgnoreCase(modeValue.getValue())) ? modes.stream().filter(disablerMode -> disablerMode.getName().equalsIgnoreCase(modeValue.getValue())).findAny().get() : null; // Its shouldn't be null
        if (currentMode != null)
            currentMode.onEnable();

    }

    @Subscribe
    public void onSendPacket(PacketEvent event) {
        currentMode.onPacket(event);
    }


    @Subscribe
    public void onUpdate(UpdateEvent event) {
        currentMode.onUpdate(event);
    }

    boolean shouldRun() {
        return mc.thePlayer != null && mc.thePlayer.ticksExisted > 5;
    }



    @Override
    public String getSuffix() {
        return " " + modeValue.getValueAsString();
    }
}
