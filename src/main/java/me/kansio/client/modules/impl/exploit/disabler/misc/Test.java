package me.kansio.client.modules.impl.exploit.disabler.misc;

import me.kansio.client.event.impl.PacketEvent;
import me.kansio.client.event.impl.UpdateEvent;
import me.kansio.client.manager.Manager;
import me.kansio.client.modules.impl.exploit.disabler.DisablerMode;
import me.kansio.client.utils.chat.ChatUtil;
import me.kansio.client.utils.network.PacketUtil;
import net.minecraft.network.NetHandlerPlayServer;
import net.minecraft.network.Packet;
import net.minecraft.network.login.server.S00PacketDisconnect;
import net.minecraft.network.play.INetHandlerPlayServer;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C0CPacketInput;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;

import java.util.LinkedList;

public class Test extends DisablerMode {
    LinkedList<Packet<? extends INetHandlerPlayServer>> packetQueue = new LinkedList<>();

    public Test() {
        super("Ghostly Semi");
    }

    @Override
    public void onEnable() {
        ChatUtil.log("This disabler is in development so it only disables speed checks");
    }

    @Override
    public void onUpdate(UpdateEvent event) {
        //180 default
        if (mc.thePlayer.ticksExisted % 180 == 0) {
            // grab packets until the queue size is 22 or less.
            while (packetQueue.size() > 22) {
                // grab 1 packet, send and then remove it from the queue
                PacketUtil.sendPacketNoEvent(packetQueue.poll());
            }
        }
    }

    @Override
    public void onPacket(PacketEvent event) {
        if (event.getPacket() instanceof C00PacketKeepAlive) {
            event.setCancelled(true);
            packetQueue.add(event.getPacket());
        }
        if (event.getPacket() instanceof C0CPacketInput) {
            C0CPacketInput funnyPacket = event.getPacket();
            funnyPacket.forwardSpeed = Float.MAX_VALUE;
            funnyPacket.strafeSpeed = Float.MAX_VALUE;
            funnyPacket.jumping = (mc.thePlayer.ticksExisted % 2 == 0);
            funnyPacket.sneaking = (mc.thePlayer.ticksExisted % 2 != 0);
        }
        if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
            packetQueue.add(event.getPacket());
            event.setCancelled(true);
        }
    }
}
