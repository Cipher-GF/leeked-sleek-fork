package me.kansio.client.modules.impl.exploit.disabler.misc;

import me.kansio.client.event.impl.PacketEvent;
import me.kansio.client.event.impl.UpdateEvent;
import me.kansio.client.manager.Manager;
import me.kansio.client.modules.impl.exploit.disabler.DisablerMode;
import me.kansio.client.utils.chat.ChatUtil;
import me.kansio.client.utils.network.PacketUtil;
import net.minecraft.entity.player.PlayerCapabilities;
import net.minecraft.network.NetHandlerPlayServer;
import net.minecraft.network.Packet;
import net.minecraft.network.login.server.S00PacketDisconnect;
import net.minecraft.network.play.INetHandlerPlayServer;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;

import java.util.LinkedList;

public class Test extends DisablerMode {
    LinkedList<Packet<? extends INetHandlerPlayServer>> packetQueue = new LinkedList<>();

    public Test() {
        super("Ghostly Semi");
    }

    boolean tp = false;

    @Override
    public void onEnable() {
        ChatUtil.log("This disabler is in development so it only disables speed checks");
    }

    @Override
    public void onUpdate(UpdateEvent event) {
        if (mc.thePlayer.ticksExisted % 10 == 0) {
            PacketUtil.sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, -69.5, mc.thePlayer.posZ, true));
            tp = true;
            ChatUtil.log("sex");
        }
    }

    @Override
    public void onPacket(PacketEvent event) {
        if (event.getPacket() instanceof C03PacketPlayer) {
            PacketUtil.sendPacket(new C18PacketSpectate(mc.thePlayer.getGameProfile().getId()));
            PlayerCapabilities playerCapabilities = new PlayerCapabilities();
            playerCapabilities.isFlying = true;
            playerCapabilities.allowFlying = true;
            playerCapabilities.isCreativeMode = false;
            PacketUtil.sendPacket(new C13PacketPlayerAbilities(playerCapabilities));
            PacketUtil.sendPacket(new C0CPacketInput(1.05F, 1.05F, true, false));
        }
        if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
            event.setCancelled(true);
        }
        if (event.getPacket() instanceof C00PacketKeepAlive) {
            event.setCancelled(true);
        }

        if (event.getPacket() instanceof S08PacketPlayerPosLook && tp) {
            S08PacketPlayerPosLook p = event.getPacket();

            event.setCancelled(true);

            PacketUtil.sendPacketNoEvent(new C03PacketPlayer
                    .C06PacketPlayerPosLook(p.getX(),
                    p.getY(),
                    p.getZ(),
                    p.getYaw(),
                    p.getPitch(), true));
            tp = false;
        }
    }
}
